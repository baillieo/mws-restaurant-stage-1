{"version":3,"names":[],"mappings":"","sources":["restaurant_info.js"],"sourcesContent":["let restaurant;\r\nvar newMap;\r\nconst review_form = document.getElementById(\"review-form\");\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\n document.addEventListener('DOMContentLoaded', (event) => {  \r\n \tinitMap();\r\n\r\n });\r\n\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\n initMap = () => {\r\n \tfetchRestaurantFromURL((error, restaurant) => {\r\n\t\tif (error) { // Got an error!\r\n\t\t\tconsole.error(error);\r\n\t\t} else {      \r\n\t\t\tself.newMap = L.map('map', {\r\n\t\t\t\tcenter: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n\t\t\t\tzoom: 16,\r\n\t\t\t\tscrollWheelZoom: false\r\n\t\t\t});\r\n\t\t\tL.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n\t\t\t\tmapboxToken: 'pk.eyJ1IjoiYmFpbGxpZW8iLCJhIjoiY2pqc3o4ZXNsMGVwMTNwbzZsM21yaDd2dCJ9.HO3p2IIO48Tir6PGL7u8mA',\r\n\t\t\t\tmaxZoom: 18,\r\n\t\t\t\tattribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n\t\t\t\t'<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n\t\t\t\t'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n\t\t\t\tid: 'mapbox.streets'    \r\n\t\t\t}).addTo(newMap);\r\n\t\t\tfillBreadcrumb();\r\n\t\t\tDBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n\t\t}\r\n\t});\r\n }  \r\n \r\n/* window.initMap = () => {\r\n\tfetchRestaurantFromURL((error, restaurant) => {\r\n\t\tif (error) { // Got an error!\r\n\t\t\tconsole.error(error);\r\n\t\t} else {\r\n\t\t\tself.map = new google.maps.Map(document.getElementById('map'), {\r\n\t\t\t\tzoom: 16,\r\n\t\t\t\tcenter: restaurant.latlng,\r\n\t\t\t\tscrollwheel: false\r\n\t\t\t});\r\n\t\t\tfillBreadcrumb();\r\n\t\t\tDBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n\t\t}\r\n\t});\r\n} */\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\n fetchRestaurantFromURL = (callback) => {\r\n\tif (self.restaurant) { // restaurant already fetched!\r\n\t\tcallback(null, self.restaurant)\r\n\t\treturn;\r\n\t}\r\n\tconst id = getParameterByName('id');\r\n\tif (!id) { // no id found in URL\r\n\t\terror = 'No restaurant id in URL'\r\n\t\tcallback(error, null);\r\n\t} else {\r\n\t\tDBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n\t\t\tself.restaurant = restaurant;\r\n\t\t\tif (!restaurant) {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tDBHelper.fetchRestaurantReviews(self.restaurant, (error, reviews) => {\r\n\t\t\t\tself.restaurant.reviews = reviews;\r\n\t\t\t\tif (!reviews) {\r\n\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t}\r\n\t\t\t\tfillRestaurantHTML();\r\n\t\t\t\tcallback(null, restaurant)\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\n fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n\r\n\r\n \tconst name = document.getElementById('restaurant-name');\r\n \tname.innerHTML = restaurant.name;\r\n\r\n\t// Import checkbox details whilst the restaurant is being rendered\r\n\tconst faveCon = document.getElementById('faveCon');\r\n\tconst faveBox = faveCon.childNodes[1];\r\n\tfaveBox.dataset.check = restaurant.is_favorite;\r\n\tif(faveBox.dataset.check === \"false\"){\r\n\t\tfaveBox.style.backgroundColor = \"#f3f3f3\";\r\n\t\tfaveBox.setAttribute('aria-checked', 'false');\r\n\t} else {\r\n\t\tfaveBox.style.backgroundColor = \"black\";\r\n\t\tfaveBox.setAttribute('aria-checked', 'true');\r\n\t}\r\n\r\n\tfaveCon.addEventListener('click', function(){\r\n\t\tif(faveBox.dataset.check === \"false\"){\r\n\t\t\tfaveBox.dataset.check = true;\r\n\t\t\tfaveBox.style.backgroundColor = \"black\";\r\n\t\t\tfaveBox.setAttribute('aria-checked', true);\r\n\t\t} else {\r\n\t\t\tfaveBox.dataset.check = false;\r\n\t\t\tfaveBox.style.backgroundColor = \"#f3f3f3\";\r\n\t\t\tfaveBox.setAttribute('aria-checked', false);\r\n\t\t}\r\n\t\tDBHelper.faveToggle(restaurant, faveBox.dataset.check)\r\n\t})\r\n\r\n\tconst address = document.getElementById('restaurant-address');\r\n\taddress.innerHTML = restaurant.address;\r\n\r\n\tconst image = document.getElementById('restaurant-img');\r\n\timage.className = 'restaurant-img'\r\n\timage.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\timage.alt = `Image of ${restaurant.name} Restaurant` ;\r\n\r\n\tconst cuisine = document.getElementById('restaurant-cuisine');\r\n\tcuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n\t// fill operating hours\r\n\tif (restaurant.operating_hours) {\r\n\t\tfillRestaurantHoursHTML();\r\n\t}\r\n\t\r\n\t// fill reviews\r\n\tfillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\n fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n \tconst hours = document.getElementById('restaurant-hours');\r\n \tfor (let key in operatingHours) {\r\n \t\tconst row = document.createElement('tr');\r\n\r\n \t\tconst day = document.createElement('td');\r\n \t\tday.innerHTML = key;\r\n \t\trow.appendChild(day);\r\n\r\n \t\tconst time = document.createElement('td');\r\n \t\ttime.innerHTML = operatingHours[key];\r\n \t\trow.appendChild(time);\r\n\r\n \t\thours.appendChild(row);\r\n \t}\r\n }\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews, restaurant = self.restaurant) => {\r\n\tconst container = document.getElementById('reviews-container');\r\n\t\r\n\tif (!reviews) {\r\n\t\tconst noReviews = document.createElement('p');\r\n\t\tnoReviews.innerHTML = 'No reviews yet!';\r\n\t\tnoReviews.setAttribute('tabindex', 0);\r\n\t\tcontainer.appendChild(noReviews);\r\n\t\treturn;\r\n\t}\r\n\tconst ul = document.getElementById('reviews-list');\r\n\tconsole.log(reviews.filter(res => res.restaurant_id === restaurant.id))\r\n\treviews.filter(res => res.restaurant_id === restaurant.id).forEach(review => {\r\n\t\tul.appendChild(createReviewHTML(review));\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\n createReviewHTML = (review) => {\r\n \tconst li = document.createElement('li');\r\n \tconst name = document.createElement('p');\r\n \tname.innerHTML = review.name;\r\n \tname.setAttribute('tabindex', 0);\r\n \tli.appendChild(name);\r\n \tconst date = document.createElement('p'); \r\n \tdate.innerHTML = new Date(review.updatedAt).toDateString();\r\n\r\n \tli.appendChild(date);\r\n\r\n \tconst rating = document.createElement('p');\r\n \trating.innerHTML = `Rating: ${review.rating}`;\r\n \tli.appendChild(rating);\r\n\r\n \tconst comments = document.createElement('p');\r\n \tcomments.innerHTML = review.comments;\r\n \tcomments.setAttribute('tabindex', 0);\r\n \tli.appendChild(comments);\r\n\r\n \treturn li;\r\n }\r\n\r\n/**\r\n * Submitting review form\r\n */\r\n\r\n\r\n review_form.addEventListener(\"submit\", function (event) {\r\n \tevent.preventDefault();\r\n \tconst data = new FormData(review_form);\r\n \tlet review = {\"restaurant_id\": self.restaurant.id};\r\n\t// Reverse values\r\n\tfor (var [key, value] of data.entries()) {\r\n\t\treview[key] = value;\r\n\t}\r\n\tDBHelper.submitReview(review)\r\n\t.then(data => {\r\n\t\tconst ul = document.getElementById('reviews-list');\r\n\t\tul.appendChild(createReviewHTML(review));\r\n\t\treview_form.reset();\r\n\t})\r\n\t.catch(error => console.error(error))\r\n});\r\n\r\n\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\n fillBreadcrumb = (restaurant=self.restaurant) => {\r\n \tconst breadcrumb = document.getElementById('breadcrumb');\r\n \tconst li = document.createElement('li');\r\n \tli.innerHTML = restaurant.name;\r\n \tli.setAttribute('aria-current', 'Page');\r\n \tbreadcrumb.appendChild(li);\r\n }\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\n getParameterByName = (name, url) => {\r\n \tif (!url)\r\n \t\turl = window.location.href;\r\n \tname = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n \tconst regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n \tresults = regex.exec(url);\r\n \tif (!results)\r\n \t\treturn null;\r\n \tif (!results[2])\r\n \t\treturn '';\r\n \treturn decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n }\r\n\r\n"],"file":"../restaurant_info.js"}