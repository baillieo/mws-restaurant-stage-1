{"version":3,"names":[],"mappings":"","sources":["restaurant_info.js"],"sourcesContent":["let restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoiYmFpbGxpZW8iLCJhIjoiY2pqc3o4ZXNsMGVwMTNwbzZsM21yaDd2dCJ9.HO3p2IIO48Tir6PGL7u8mA',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/* window.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n} */\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n\r\n\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  // Import checkbox details whilst the restaurant is being rendered\r\n  const faveCon = document.getElementById('faveCon');\r\n  const faveBox = faveCon.childNodes[1];\r\n  faveBox.dataset.check = restaurant.is_favorite;\r\n   if(faveBox.dataset.check === \"false\"){\r\n      faveBox.style.backgroundColor = \"#f3f3f3\";\r\n      faveBox.setAttribute('aria-checked', 'false');\r\n    } else {\r\n      faveBox.style.backgroundColor = \"black\";\r\n      faveBox.setAttribute('aria-checked', 'true');\r\n    }\r\n\r\n  faveCon.addEventListener('click', function(){\r\n    if(faveBox.dataset.check === \"false\"){\r\n      faveBox.dataset.check = true;\r\n      faveBox.style.backgroundColor = \"black\";\r\n      faveBox.setAttribute('aria-checked', true);\r\n    } else {\r\n      faveBox.dataset.check = false;\r\n      faveBox.style.backgroundColor = \"#f3f3f3\";\r\n       faveBox.setAttribute('aria-checked', false);\r\n    }\r\n    DBHelper.faveToggle(restaurant, faveBox.dataset.check)\r\n  })\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `Image of ${restaurant.name} Restaurant` ;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  \r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute('role', 'article');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n  // Add ARIA listitem role\r\n  li.setAttribute('role', 'listitem');\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'Page');\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n"],"file":"../restaurant_info.js"}